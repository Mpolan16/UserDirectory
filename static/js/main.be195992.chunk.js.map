{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/SearchArea/index.js","components/TableArea/index.js","utils/API.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","Header","SearchArea","id","type","placeholder","onChange","e","employeeSearch","TableArea","onClick","sortLastName","employees","map","emp","key","name","value","src","picture","thumbnail","alt","first","last","phone","email","dob","date","slice","axios","get","Main","state","sortStatus","filteredEmployees","event","nameSearch","target","empLookingFor","filter","foundEmp","toLowerCase","includes","setState","ascendingEmp","sort","a","b","descendingEmp","lname","API","then","data","results","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8WAOeA,MAJf,SAAiBC,GACb,OAAO,wCAAMC,UAAU,WAAcD,K,MCO1BE,MARf,WACI,OACI,4BAAQD,UAAU,UACd,oD,sCCKGE,MARf,SAAoBH,GAChB,OACI,yBAAKI,GAAG,cACJ,2BAAOC,KAAK,OAAOC,YAAY,SAAUC,SAAY,SAACC,GAAD,OAAKR,EAAMS,eAAeD,Q,MC4B5EE,MA/Bf,SAAmBV,GACf,OACI,2BAAOC,UAAU,SACb,+BACI,4BACI,kCACA,qCACA,wBAAIU,QAASX,EAAMY,cAAnB,QACA,qCACA,qCACA,qCAGR,+BACKZ,EAAMa,UAAUC,KAAI,SAAAC,GACjB,OACA,wBAAIC,IAAKD,EAAIX,GAAGa,KAAO,IAAMF,EAAIX,GAAGc,OAChC,4BAAKH,EAAIX,GAAGa,KAAO,IAAMF,EAAIX,GAAGc,OAChC,4BAAI,yBAAKC,IAAKJ,EAAIK,QAAQC,UAAWC,IAAI,cACzC,4BAAKP,EAAIE,KAAKM,MAAQ,IAAMR,EAAIE,KAAKO,MACrC,4BAAKT,EAAIU,OACT,4BAAKV,EAAIW,OACT,4BAAMX,EAAIY,IAAIC,KAAMC,MAAM,EAAE,Y,iBCvBrC,EACG,WACV,OAAOC,IAAMC,IAAI,qFCEJC,G,kNACjBC,MAAQ,CACJpB,UAAU,GACVqB,WAAW,IACXC,kBAAkB,I,EAWtB1B,eAAiB,SAAA2B,GAEb,IAAIC,EAAaD,EAAME,OAAOpB,MAC1BqB,EAAgB,EAAKN,MAAMpB,UAAU2B,QAAQ,SAAAC,GAC7C,OACIA,EAASxB,KAAKO,KAAKkB,cAAcC,SAASN,EAAWK,kBAG7D,EAAKE,SAAS,CAACT,kBAAkBI,K,EAErC3B,aAAe,WAEX,GAA8B,MAA1B,EAAKqB,MAAMC,WAAoB,CAC/B,IAAIW,EAAe,EAAKZ,MAAME,kBAAkBW,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAE9B,KAAKO,KAAOwB,EAAE/B,KAAKO,KAAO,GAAI,KAE9F,EAAKoB,SAAS,CACVT,kBAAmBU,EACnBX,WAAY,UAEd,CACF,IAAIe,EAAgB,EAAKhB,MAAMpB,UAAUiC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAE9B,KAAKO,KAAOwB,EAAEE,MAAM1B,KAAO,GAAI,KAExF,EAAKoB,SAAS,CACVT,kBAAmBc,EACnBf,WAAW,Q,kEAjCF,IAAD,OAChBiB,IAAmBC,MAAK,SAAAC,GACpB,EAAKT,SAAS,CACV/B,UAAUwC,EAAKA,KAAKC,QACpBnB,kBAAkBkB,EAAKA,KAAKC,e,+BAkCpC,OACI,oCACI,kBAAC,EAAD,CAAY7C,eAAkB8C,KAAK9C,iBACnC,kBAAC,EAAD,CAAWI,UAAa0C,KAAKtB,MAAME,kBAAmBvB,aAAgB2C,KAAK3C,oB,GA/CzD4C,c,MCYnBC,MAXf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be195992.chunk.js","sourcesContent":["import React from \"react\";\nimport './style.css';\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props}/>;\n}\n\nexport default Wrapper;","import React from 'react';\nimport './style.css';\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h2>Employee Directory</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport './style.css';\n\nfunction SearchArea(props) {\n    return(\n        <div id=\"searchArea\">\n            <input type=\"text\" placeholder=\"search\"  onChange = {(e)=>props.employeeSearch(e)}/>\n        </div>\n    )\n}\n\nexport default SearchArea;\n","import React from \"react\";\nimport './style.css';\n\nfunction TableArea(props) {\n    return(\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Image</th>\n                    <th onClick={props.sortLastName}>Name</th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                    <th>DOB</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.employees.map(emp => {\n                    return (\n                    <tr key={emp.id.name + \"-\" + emp.id.value}>\n                        <td>{emp.id.name + \"-\" + emp.id.value}</td>\n                        <td><img src={emp.picture.thumbnail} alt=\"employee\" /></td>\n                        <td>{emp.name.first + \" \" + emp.name.last}</td>\n                        <td>{emp.phone}</td>\n                        <td>{emp.email}</td>\n                        <td>{(emp.dob.date).slice(0,10)}</td>\n                    </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default TableArea;\n","import axios from 'axios';\n\nexport default {\n    employeeInfo: function () {\n        return axios.get('https://randomuser.me/api/?results=20&inc=id,name,email,dob,phone,picture&nat=us');\n    }\n};\n\n// make a backup with a json file just in case this doesnt work","import React, { Component } from 'react';\nimport SearchArea from '../SearchArea';\nimport TableArea from '../TableArea';\nimport API from '../../utils/API.js';\nimport './style.css';\n\nexport default class Main extends Component {\n    state = {\n        employees:[],\n        sortStatus:\"D\",\n        filteredEmployees:[]\n    }\n    componentDidMount() {\n        API.employeeInfo().then(data=> {\n            this.setState({\n                employees:data.data.results,\n                filteredEmployees:data.data.results\n            })\n        })\n    }\n    \n    employeeSearch = event =>{\n        // get what they input event.target.value....use filter to filer all employees this.state.employees.filter (keep lower and uppercase in mind)\n        let nameSearch = event.target.value;\n        let empLookingFor = this.state.employees.filter (foundEmp => {\n            return(\n                foundEmp.name.last.toLowerCase().includes(nameSearch.toLowerCase())\n            )\n        })\n        this.setState({filteredEmployees:empLookingFor})\n    }\n    sortLastName = () =>{\n// add state to say what the current state of function (A and D order)..use if else, sort function pass it a compare function inside the sort function.\n        if (this.state.sortStatus === \"D\") {\n            let ascendingEmp = this.state.filteredEmployees.sort((a,b) => a.name.last > b.name.last ? 1: -1)\n\n            this.setState({\n                filteredEmployees: ascendingEmp,\n                sortStatus: \"A\"\n            });\n        } else{\n            let descendingEmp = this.state.employees.sort((a,b) => a.name.last < b.lname.last ? 1: -1)\n\n            this.setState({\n                filteredEmployees: descendingEmp,\n                sortStatus:\"D\"\n            });\n        }\n    }\n    render() {\n        return(\n            <>\n                <SearchArea employeeSearch = {this.employeeSearch}/>\n                <TableArea employees = {this.state.filteredEmployees} sortLastName = {this.sortLastName}/>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}